syntax = "proto3";

package honu.replica.v1;
option go_package = "github.com/rotationalio/honu/replica";

import "object/v1/object.proto";

// The Replication Service implements a gossip-based anti-entropy protocol for
// synchronizing replicas around the world. Honu expects total replication, meaning
// all replicas will have a copy of all replicated data (although some data won't be
// replicated). Not only is the Replication service is the mechanism by which data is
// exchanged, but also network membership and discovery. Every replica should
// periodically perform anti-entropy via the Gossip RPC with a randomly selected peer,
// and update its data store via a "latest writer wins"policy.
//
// The Replication Service requires mTLS authentication in order to conduct exchanges.
service Replication {
    // During gossip, the initiating replica sends a randomly selected remote peer the
    // version vectors of all objects it currently stores. The remote peer should
    // respond with updates that correspond to more recent versions of the objects. The
    // remote peer can than also make a reciprocal request for updates by sending the
    // set of versions requested that were more recent on the initiating replica, and
    // use a partial flag to indicate that it is requesting specific versions. This
    // mechanism implements bilateral anti-entropy: a push and pull gossip.
    rpc Gossip(VersionVectors) returns (Updates) {}
}

// VersionVectors initiate a Gossip RPC by passing along the current state of the
// namespace of objects on the initiating replica. Objects should not have data
// populated in this message, only metadata. If the partial flag is set, that indicates
// that the replica only wants to consider the objects described rather than the entire
// namespace (e.g. objects that may have been created outside the set of objects
// described). The partial flag is typically used as a mechanism to fetch specific
// objects that are known to be later from the remote replica. The namespaces array
// specifies which namespaces should be considered in gossip allowing for partial
// replication by namespace if necessary. If the namespaces array is empty, then all
// namespaces are considered during Gossip.
message VersionVectors {
    // Version vectors of objects without data.
    repeated honu.object.v1.Object objects = 1;

    // A request to consider only the objects specified in the version vector and not
    // the entire namespace (e.g. ignore objects that are not specified).
    bool partial = 2;

    // Limit the comparison only to the specified namespace(s). If not set or empty,
    // then all namespaces are considered.
    repeated string namespaces = 3;
}

// Updates returns data to repair entropy (e.g. to repair the divergence caused by
// updates). Updates should only contain the objects that have later versions and the
// objects should have their data fields populated.
message Updates {
    repeated honu.object.v1.Object objects = 1;
}